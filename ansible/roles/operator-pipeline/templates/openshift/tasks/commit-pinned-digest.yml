---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: commit-pinned-digest
  labels:
    app.kubernetes.io/version: "0.4"
  annotations:
    tekton.dev/pipelines.minVersion: "0.21.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "commit-pinned-digest"

spec:
  workspaces:
    - name: source
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
  params:
    - name: dirty_flag
    - name: VERBOSE
      description: Log the commands that are executed during `commit-pinned-digest`'s operation.
      type: string
      default: "true"
    - name: GIT_USER_NAME
      type: string
      description: |
        Git user name for performing git operation.
      default: "digestPinning"
    - name: GIT_USER_EMAIL
      type: string
      description: |
        Git user email for performing git operation.
      default: "no.reply@redhat.com"
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task.
    - name: branch
  steps:
    - name: git
      image: docker.io/alpine/git:v2.26.2@sha256:23618034b0be9205d9cc0846eb711b12ba4c9b468efdd8a59aac1d7b1a23363f #tag: v2.26.2
      workingDir: $(workspaces.source.path)
      env:
        - name: PARAM_VERBOSE
          value: $(params.VERBOSE)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #! /usr/bin/env sh
        set -eu

        DIRTY_FLAG="$(params.dirty_flag)"
        echo $DIRTY_FLAG
        if [ $DIRTY_FLAG == "true" ]; then
          echo "Commit changes to temporary branch"

          if [ "${PARAM_VERBOSE}" = "true" ] ; then
            set -x
          fi

          if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
            cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" $HOME/.ssh
            chmod 700 $HOME/.ssh
            chmod -R 400 $HOME/.ssh/*
          fi

          # Setting up the config for the git.
          git config --global user.email "$(params.GIT_USER_EMAIL)"
          git config --global user.name "$(params.GIT_USER_NAME)"

          RANDOM_STRING=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9'| fold -w 3 | head -n 1)
          TEMP_BRANCH="pinned-operator-manifest-${RANDOM_STRING}"
          git checkout -b "${TEMP_BRANCH}"
          git add -u
          git commit -m "Pin the operator manifests"
          git push origin "${TEMP_BRANCH}"

          RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
          EXIT_CODE="$?"
          if [ "$EXIT_CODE" != 0 ]; then
            exit $EXIT_CODE
          fi
          # Make sure we don't add a trailing newline to the result!
          echo -n "$RESULT_SHA" > $(results.commit.path)
          echo -n "$TEMP_BRANCH" > $(results.branch.path)

        else
          echo "Skipping commit"
        fi
