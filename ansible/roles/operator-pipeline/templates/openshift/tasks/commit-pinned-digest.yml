---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: commit-pinned-digest
  labels:
    app.kubernetes.io/version: "0.4"
  annotations:
    tekton.dev/pipelines.minVersion: "0.21.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "commit-pinned-digest"

spec:
  workspaces:
    - name: source
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
  params:
    - name: dirty_flag
    - name: GIT_USER_NAME
      type: string
      description: |
        Git user name for performing git operation.
      default: ""
    - name: GIT_USER_EMAIL
      type: string
      description: |
        Git user email for performing git operation.
      default: ""
    - name: USER_HOME
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
    - name: VERBOSE
      description: Log the commands that are executed during `git-clone`'s operation.
      type: string
      default: "true"
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task.
  steps:
    - name: commit-changes
      image: registry.access.redhat.com/ubi8-minimal
      workingDir: $(workspaces.source.path)
      env:
        - name: PARAM_VERBOSE
          value: $(params.VERBOSE)
        - name: PARAM_USER_HOME
          value: $(params.USER_HOME)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #! /usr/bin/env bash
        set -eu

        DIRTY_FLAG="$(params.dirty_flag)"
        echo $DIRTY_FLAG
        if [ $DIRTY_FLAG == "true" ]; then
          echo "Commit changes to temporary branch"

          if [ "${PARAM_VERBOSE}" = "true" ] ; then
            set -x
          fi

          if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
            cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
            chmod 700 "${PARAM_USER_HOME}"/.ssh
            chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
          fi

          # Setting up the config for the git.
          git config --global user.email "$(params.GIT_USER_EMAIL)"
          git config --global user.name "$(params.GIT_USER_NAME)"

          TEMP_BRANCH = "pinned-operator-manifest"
          git checkout -b "${TEMP_BRANCH}"
          git add --all
          git commit -m "Pin the operator manifests"
          git push origin "{TEMP_BRANCH}"

          RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
          EXIT_CODE="$?"
          if [ "$EXIT_CODE" != 0 ]; then
            exit $EXIT_CODE
          fi
          # Make sure we don't add a trailing newline to the result!
          echo -n "$RESULT_SHA" > $(results.commit.path)

        else
          echo "Skipping commit"
        fi
